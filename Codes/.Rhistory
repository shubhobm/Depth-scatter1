mydata = npfda.elnino
# mydata = Octane.X
n = nrow(mydata)
p = ncol(mydata)
plot(as.numeric(mydata[1,]), col=grey(.6), type='l',
ylim=(c(min(mydata), max(mydata)+.1)))
for(i in 2:n){
lines(as.numeric(mydata[i,]), col=grey(.6))
}
# take a B-spline basis and orthonormalize it
B = bs(1:p, knots=seq(0,p-1,by=2), degree=3)
B1 = gramSchmidt(B)$Q
# transform data... diff between two bins is 1
Xt = as.matrix(mydata[,-1]) %*% B1[-1,]
set.seed(08162016)
source('misc_functions.R')
ncomp = 2
nrep = 1e3
out.mat = matrix(0, nrep, 3)
## iterate nrep times
pb = txtProgressBar(0, nrep)
for(rep in 1:nrep){
pcarank = PcaRank(Xt, k=ncomp, proj=1e2)
mu = colSums(pcarank@scores %*% t(pcarank@loadings))
# generate random observations
V = c(1e-3, 1e-1, 1e-3, 1e-3, 1e-3)
ndata = n
nbasis = ncol(B)
## add noise to loadings
B.mat = matrix(0, nrow=ndata, ncol=nbasis)
for(i in 1:ndata){
B.mat.j = matrix(0, nrow=nbasis, ncol=ncomp)
for(j in 1:ncomp){
B.mat.j[,j] = my.mvrnorm(n=1, mu=pcarank@loadings[,j], Sigma=diag(rep(V[j],nbasis)))
}
B.mat[i,] = colSums(pcarank@scores %*% t(B.mat.j))
}
## add white noise to each element
B.mat = B.mat + matrix(rnorm(ndata*nbasis, 0, 1e-1), ndata, nbasis)
## add comtamination
B.mat[2:6,2:6] = B.mat[2:6,2:6] + 1e2
out.mat[rep,] = c(sqrt(mean((mu - spatial.median(B.mat, delta=1e-5)$mu)^2)),
sqrt(mean((mu - depth.median(B.mat, delta=1e-5)$mu)^2)),
sqrt(mean((mu - colMeans(B.mat))^2)))
setTxtProgressBar(pb,rep)
}
close(pb)
apply(out.mat, 2, mean) # mean error for spatial median, depth median and mean
apply(out.mat, 2, sd) # sd error for spatial median, depth median and mean
Xhat = B.mat %*% t(B1)
plot(as.numeric(Xhat[1,-1]), col=grey(.6), type='l',xaxt='n',
ylab="Sea surface temperature", xlab="Month",
ylim=(c(min(Xhat), max(Xhat+.1)))
plot(as.numeric(Xhat[1,-1]), col=grey(.6), type='l',xaxt='n',
ylab="Sea surface temperature", xlab="Month",
ylim=(c(min(Xhat), max(Xhat+.1))))
axis(side=1, at=1:12, labels=c('Jun','Jul','Aug','Sep','Oct','Nov','Dec',"Jan","Feb",'Mar','Apr','May'))
for(i in 2:n){
lines(as.numeric(Xhat[i,-1]), col=grey(.6))
}
pcarank = PcaRank(Xt, k=ncomp, proj=1e2)
mu = colSums(pcarank@scores %*% t(pcarank@loadings))
# generate random observations
V = c(1e-3, 1e-1, 1e-3, 1e-3, 1e-3)
ndata = n
nbasis = ncol(B)
## add noise to loadings
B.mat = matrix(0, nrow=ndata, ncol=nbasis)
for(i in 1:ndata){
B.mat.j = matrix(0, nrow=nbasis, ncol=ncomp)
for(j in 1:ncomp){
B.mat.j[,j] = my.mvrnorm(n=1, mu=pcarank@loadings[,j], Sigma=diag(rep(V[j],nbasis)))
}
B.mat[i,] = colSums(pcarank@scores %*% t(B.mat.j))
}
## add white noise to each element
B.mat = B.mat + matrix(rnorm(ndata*nbasis, 0, 1e-1), ndata, nbasis)
Xhat = B.mat %*% t(B1)
plot(as.numeric(Xhat[1,-1]), col=grey(.6), type='l',xaxt='n',
ylab="Sea surface temperature", xlab="Month",
ylim=(c(min(Xhat), max(Xhat+.1))))
axis(side=1, at=1:12, labels=c('Jun','Jul','Aug','Sep','Oct','Nov','Dec',"Jan","Feb",'Mar','Apr','May'))
for(i in 2:n){
lines(as.numeric(Xhat[i,-1]), col=grey(.6))
}
V = c(1e-3, 1e-1, 1e-3, 1e-3, 1e-3)
ndata = n
nbasis = ncol(B)
## add noise to loadings
B.mat = matrix(0, nrow=ndata, ncol=nbasis)
for(i in 1:ndata){
B.mat.j = matrix(0, nrow=nbasis, ncol=ncomp)
for(j in 1:ncomp){
B.mat.j[,j] = my.mvrnorm(n=1, mu=pcarank@loadings[,j], Sigma=diag(rep(V[j],nbasis)))
}
B.mat[i,] = colSums(pcarank@scores %*% t(B.mat.j))
}
Xhat = B.mat %*% t(B1)
plot(as.numeric(Xhat[1,-1]), col=grey(.6), type='l',xaxt='n',
ylab="Sea surface temperature", xlab="Month",
ylim=(c(min(Xhat), max(Xhat+.1))))
axis(side=1, at=1:12, labels=c('Jun','Jul','Aug','Sep','Oct','Nov','Dec',"Jan","Feb",'Mar','Apr','May'))
for(i in 2:n){
lines(as.numeric(Xhat[i,-1]), col=grey(.6))
}
# generate random observations
V = c(1e-3, 1e-3, 1e-3, 1e-3, 1e-3)
ndata = n
nbasis = ncol(B)
## add noise to loadings
B.mat = matrix(0, nrow=ndata, ncol=nbasis)
for(i in 1:ndata){
B.mat.j = matrix(0, nrow=nbasis, ncol=ncomp)
for(j in 1:ncomp){
B.mat.j[,j] = my.mvrnorm(n=1, mu=pcarank@loadings[,j], Sigma=diag(rep(V[j],nbasis)))
}
B.mat[i,] = colSums(pcarank@scores %*% t(B.mat.j))
}
Xhat = B.mat %*% t(B1)
plot(as.numeric(Xhat[1,-1]), col=grey(.6), type='l',xaxt='n',
ylab="Sea surface temperature", xlab="Month",
ylim=(c(min(Xhat), max(Xhat+.1))))
axis(side=1, at=1:12, labels=c('Jun','Jul','Aug','Sep','Oct','Nov','Dec',"Jan","Feb",'Mar','Apr','May'))
for(i in 2:n){
lines(as.numeric(Xhat[i,-1]), col=grey(.6))
}
pcarank = PcaRank(Xt, k=ncomp, proj=1e2)
mu = colSums(pcarank@scores %*% t(pcarank@loadings))
# generate random observations
V = c(1e-3, 1e-3, 1e-3, 1e-3, 1e-3)
ndata = n
nbasis = ncol(B)
## add noise to loadings
B.mat = matrix(0, nrow=ndata, ncol=nbasis)
for(i in 1:ndata){
B.mat.j = matrix(0, nrow=nbasis, ncol=ncomp)
for(j in 1:ncomp){
B.mat.j[,j] = my.mvrnorm(n=1, mu=pcarank@loadings[,j], Sigma=diag(rep(V[j],nbasis)))
}
B.mat[i,] = mu + colSums(pcarank@scores %*% t(B.mat.j))
}
Xhat = B.mat %*% t(B1)
plot(as.numeric(Xhat[1,-1]), col=grey(.6), type='l',xaxt='n',
ylab="Sea surface temperature", xlab="Month",
ylim=(c(min(Xhat), max(Xhat+.1))))
axis(side=1, at=1:12, labels=c('Jun','Jul','Aug','Sep','Oct','Nov','Dec',"Jan","Feb",'Mar','Apr','May'))
for(i in 2:n){
lines(as.numeric(Xhat[i,-1]), col=grey(.6))
}
plot(as.numeric(mydata[1,]), col=grey(.6), type='l',
ylim=(c(min(mydata), max(mydata)+.1)))
for(i in 2:n){
lines(as.numeric(mydata[i,]), col=grey(.6))
}
lines(mu)
lines(mu %% t(B1), lwd=2)
mu %% t(B1)
mu
dim(mu %% t(B1))
dim(mu %% (B1))
dim(B1)
mu
B1 %*% mu
n = nrow(mydata)
p = ncol(mydata)
plot(as.numeric(mydata[1,]), col=grey(.6), type='l',
ylim=(c(min(mydata), max(mydata)+.1)))
for(i in 2:n){
lines(as.numeric(mydata[i,]), col=grey(.6))
}
# take a B-spline basis and orthonormalize it
B = bs(1:p, knots=seq(0,p-1,by=2), degree=3)
B1 = gramSchmidt(B)$Q
# transform data... diff between two bins is 1
Xt = as.matrix(mydata[,-1]) %*% B1[-1,]
set.seed(08162016)
source('misc_functions.R')
ncomp = 2
nrep = 1e3
out.mat = matrix(0, nrep, 3)
## iterate nrep times
pb = txtProgressBar(0, nrep)
for(rep in 1:nrep){
pcarank = PcaRank(Xt, k=ncomp, proj=1e2)
mu = colMeans(pcarank@scores %*% t(pcarank@loadings))
# generate random observations
V = c(1e-3, 1e-3, 1e-3, 1e-3, 1e-3)
ndata = n
nbasis = ncol(B)
## add noise to loadings
B.mat = matrix(0, nrow=ndata, ncol=nbasis)
for(i in 1:ndata){
B.mat.j = matrix(0, nrow=nbasis, ncol=ncomp)
for(j in 1:ncomp){
B.mat.j[,j] = my.mvrnorm(n=1, mu=pcarank@loadings[,j], Sigma=diag(rep(V[j],nbasis)))
}
B.mat[i,] = mu + colMeans(pcarank@scores %*% t(B.mat.j))
}
## add white noise to each element
#B.mat = B.mat + matrix(rnorm(ndata*nbasis, 0, 1e-1), ndata, nbasis)
## add comtamination
#B.mat[2:6,2:6] = B.mat[2:6,2:6] + 1e2
out.mat[rep,] = c(sqrt(mean((mu - spatial.median(B.mat, delta=1e-5)$mu)^2)),
sqrt(mean((mu - depth.median(B.mat, delta=1e-5)$mu)^2)),
sqrt(mean((mu - colMeans(B.mat))^2)))
setTxtProgressBar(pb,rep)
}
close(pb)
Xhat = B.mat %*% t(B1)
plot(as.numeric(Xhat[1,-1]), col=grey(.6), type='l',xaxt='n',
ylab="Sea surface temperature", xlab="Month",
ylim=(c(min(Xhat), max(Xhat+.1))))
axis(side=1, at=1:12, labels=c('Jun','Jul','Aug','Sep','Oct','Nov','Dec',"Jan","Feb",'Mar','Apr','May'))
for(i in 2:n){
lines(as.numeric(Xhat[i,-1]), col=grey(.6))
}
lines(mu %% t(B1), lwd=2)
lines(B1 %*% mu, lwd=2)
lines(B1 %*% mu[-1], lwd=2)
lines((B1 %*% mu)[-1], lwd=2)
for(i in 1:ndata{B.mat[i,] = B.mat[i,] - mu})
for(i in 1:ndata){B.mat[i,] = B.mat[i,] - mu}
Xhat = B.mat %*% t(B1)
plot(as.numeric(Xhat[1,-1]), col=grey(.6), type='l',xaxt='n',
ylab="Sea surface temperature", xlab="Month",
ylim=(c(min(Xhat), max(Xhat+.1))))
axis(side=1, at=1:12, labels=c('Jun','Jul','Aug','Sep','Oct','Nov','Dec',"Jan","Feb",'Mar','Apr','May'))
for(i in 2:n){
lines(as.numeric(Xhat[i,-1]), col=grey(.6))
}
lines((B1 %*% mu)[-1], lwd=2)
sdrank = pcarank@sd
odrank = pcarank@od
csdrank = pcarank@cutoff.sd
codrank = pcarank@cutoff.od
indices = 1:n
which.ind = which(sdrank > csdrank & odrank > codrank)
plot(as.numeric(mydata[1,]), col=grey(.6), type='l',xaxt='n',
ylab="Sea surface temperature", xlab="Month",
ylim=(c(min(mydata), max(mydata)+.1)))
axis(side=1, at=1:12, labels=c('Jun','Jul','Aug','Sep','Oct','Nov','Dec',"Jan","Feb",'Mar','Apr','May'))
for(i in 2:n){
lines(as.numeric(mydata[i,]), col=grey(.6))
}
for(i in which.ind){
lines(as.numeric(mydata[i,]), col="black")
}
plot(as.numeric(Xhat[1,]), col=grey(.6), type='l',xaxt='n',
ylab="Sea surface temperature", xlab="Month",
ylim=(c(min(mydata), max(mydata)+.1)))
axis(side=1, at=1:12, labels=c('Jun','Jul','Aug','Sep','Oct','Nov','Dec',"Jan","Feb",'Mar','Apr','May'))
for(i in 2:n){
lines(as.numeric(Xhat[i,]), col=grey(.6))
}
for(i in which.ind){
lines(as.numeric(Xhat[i,]), col="black")
}
Xhat
source('misc_functions.R')
pcarank = PcaRank(Xt, k=2, proj=1e2)
Xthat = matrix(spatial.median(Xt, delta=1e-5)$mu, nrow=n, ncol=ncol(B1), byrow=T) +
pcarank@scores %*% t(pcarank@loadings)
Xhat = Xthat %*% t(B1)
Xhat[,1] = as.numeric(mydata[,1])
sdrank = pcarank@sd
odrank = pcarank@od
csdrank = pcarank@cutoff.sd
codrank = pcarank@cutoff.od
indices = 1:n
which.ind = which(sdrank > csdrank & odrank > codrank)
plot(as.numeric(Xhat[1,]), col=grey(.6), type='l',xaxt='n',
ylab="Sea surface temperature", xlab="Month",
ylim=(c(min(mydata), max(mydata)+.1)))
axis(side=1, at=1:12, labels=c('Jun','Jul','Aug','Sep','Oct','Nov','Dec',"Jan","Feb",'Mar','Apr','May'))
for(i in 2:n){
lines(as.numeric(Xhat[i,]), col=grey(.6))
}
for(i in which.ind){
lines(as.numeric(Xhat[i,]), col="black")
}
pcarank = PcaRank(Xt, k=ncomp, proj=1e2)
muhat = spatial.median(Xt, delta=1e-5)$mu
mu = muhat + colMeans(pcarank@scores %*% t(pcarank@loadings))
lines((B1 %*% muhat)[-1], lwd=2)
lines((B1 %*% muhat), lwd=2)
pcarank = PcaRank(Xt, k=ncomp, proj=1e2)
mu = muhat + colMeans(pcarank@scores %*% t(pcarank@loadings))
# generate random observations
V = c(1e-3, 1e-3, 1e-3, 1e-3, 1e-3)
ndata = n
nbasis = ncol(B)
## add noise to loadings
B.mat = matrix(0, nrow=ndata, ncol=nbasis)
for(i in 1:ndata){
B.mat.j = matrix(0, nrow=nbasis, ncol=ncomp)
for(j in 1:ncomp){
B.mat.j[,j] = my.mvrnorm(n=1, mu=pcarank@loadings[,j], Sigma=diag(rep(V[j],nbasis)))
}
B.mat[i,] = muhat + colMeans(pcarank@scores %*% t(B.mat.j))
}
Xhat = B.mat %*% t(B1)
Xhat[,1] = as.numeric(mydata[,1])
plot(as.numeric(Xhat[1,-1]), col=grey(.6), type='l',xaxt='n',
ylab="Sea surface temperature", xlab="Month",
ylim=(c(min(Xhat), max(Xhat+.1))))
axis(side=1, at=1:12, labels=c('Jun','Jul','Aug','Sep','Oct','Nov','Dec',"Jan","Feb",'Mar','Apr','May'))
for(i in 2:n){
lines(as.numeric(Xhat[i,-1]), col=grey(.6))
}
lines((B1 %*% muhat), lwd=2)
lines(c(median(mydata[1],(B1 %*% muhat)[-1], lwd=2)
lines(c(median(mydata[1]),(B1 %*% muhat)[-1]), lwd=2)
lines(c(median(mydata[,1]),(B1 %*% muhat)[-1]), lwd=2)
Xhat = B.mat %*% t(B1)
Xhat[,1] = as.numeric(mydata[,1])
plot(as.numeric(Xhat[1,-1]), col=grey(.6), type='l',xaxt='n',
ylab="Sea surface temperature", xlab="Month",
ylim=(c(min(Xhat), max(Xhat+.1))))
axis(side=1, at=1:12, labels=c('Jun','Jul','Aug','Sep','Oct','Nov','Dec',"Jan","Feb",'Mar','Apr','May'))
for(i in 2:n){
lines(as.numeric(Xhat[i,-1]), col=grey(.6))
}
lines(c(median(mydata[,1]),(B1 %*% muhat)[-1]), lwd=2)
B1 %*% muhat
median(mydata[,1])
Xhat = B.mat %*% t(B1)
Xhat[,1] = as.numeric(mydata[,1])
plot(as.numeric(Xhat[1,]), col=grey(.6), type='l',xaxt='n',
ylab="Sea surface temperature", xlab="Month",
ylim=(c(min(Xhat), max(Xhat+.1))))
axis(side=1, at=1:12, labels=c('Jun','Jul','Aug','Sep','Oct','Nov','Dec',"Jan","Feb",'Mar','Apr','May'))
for(i in 2:n){
lines(as.numeric(Xhat[i,]), col=grey(.6))
}
lines(c(median(mydata[,1]),(B1 %*% muhat)[-1]), lwd=2)
pcarank = PcaRank(Xt, k=ncomp, proj=1e2)
mu = muhat + colMeans(pcarank@scores %*% t(pcarank@loadings))
# generate random observations
V = c(1e-3, 1e-3, 1e-3, 1e-3, 1e-3)
ndata = n
nbasis = ncol(B)
## add noise to loadings
B.mat = matrix(0, nrow=ndata, ncol=nbasis)
for(i in 1:ndata){
B.mat.j = matrix(0, nrow=nbasis, ncol=ncomp)
for(j in 1:ncomp){
B.mat.j[,j] = my.mvrnorm(n=1, mu=pcarank@loadings[,j], Sigma=diag(rep(V[j],nbasis)))
}
B.mat[i,] = muhat + colMeans(pcarank@scores %*% t(B.mat.j))
}
## add white noise to each element
B.mat = B.mat + matrix(rnorm(ndata*nbasis, 0, 1e-1), ndata, nbasis)
Xhat = B.mat %*% t(B1)
Xhat[,1] = as.numeric(mydata[,1])
plot(as.numeric(Xhat[1,]), col=grey(.6), type='l',xaxt='n',
ylab="Sea surface temperature", xlab="Month",
ylim=(c(min(Xhat), max(Xhat+.1))))
axis(side=1, at=1:12, labels=c('Jun','Jul','Aug','Sep','Oct','Nov','Dec',"Jan","Feb",'Mar','Apr','May'))
for(i in 2:n){
lines(as.numeric(Xhat[i,]), col=grey(.6))
}
lines(c(median(mydata[,1]),(B1 %*% muhat)[-1]), lwd=2)
pcarank = PcaRank(Xt, k=ncomp, proj=1e2)
mu = muhat + colMeans(pcarank@scores %*% t(pcarank@loadings))
# generate random observations
V = c(1e-3, 1e-1, 1e-3, 1e-3, 1e-3)
ndata = n
nbasis = ncol(B)
## add noise to loadings
B.mat = matrix(0, nrow=ndata, ncol=nbasis)
for(i in 1:ndata){
B.mat.j = matrix(0, nrow=nbasis, ncol=ncomp)
for(j in 1:ncomp){
B.mat.j[,j] = my.mvrnorm(n=1, mu=pcarank@loadings[,j], Sigma=diag(rep(V[j],nbasis)))
}
B.mat[i,] = muhat + colMeans(pcarank@scores %*% t(B.mat.j))
}
## add white noise to each element
B.mat = B.mat + matrix(rnorm(ndata*nbasis, 0, 1e-1), ndata, nbasis)
Xhat = B.mat %*% t(B1)
# Xhat[,1] = as.numeric(mydata[,1])
plot(as.numeric(Xhat[1,-1]), col=grey(.6), type='l',xaxt='n',
ylab="Sea surface temperature", xlab="Month",
ylim=(c(min(Xhat), max(Xhat+.1))))
axis(side=1, at=1:12, labels=c('Jun','Jul','Aug','Sep','Oct','Nov','Dec',"Jan","Feb",'Mar','Apr','May'))
for(i in 2:n){
lines(as.numeric(Xhat[i,-1]), col=grey(.6))
}
lines((B1 %*% muhat)[-1], lwd=2)
Xhat = B.mat %*% t(B1)
# Xhat[,1] = as.numeric(mydata[,1])
plot(as.numeric(Xhat[1,-1]), col=grey(.6), type='l',xaxt='n',
ylab="Sea surface temperature", xlab="Month",
ylim=(c(min(mydata), max(mydata+.1))))
axis(side=1, at=1:12, labels=c('Jun','Jul','Aug','Sep','Oct','Nov','Dec',"Jan","Feb",'Mar','Apr','May'))
for(i in 2:n){
lines(as.numeric(Xhat[i,-1]), col=grey(.6))
}
lines((B1 %*% muhat)[-1], lwd=2)
lines((B1 %*% mu)[-1], lwd=2)
Xhat = B.mat %*% t(B1)
# Xhat[,1] = as.numeric(mydata[,1])
plot(as.numeric(Xhat[1,-1]), col=grey(.6), type='l',xaxt='n',
ylab="Sea surface temperature", xlab="Month",
ylim=(c(min(mydata), max(mydata+.1))))
axis(side=1, at=1:12, labels=c('Jun','Jul','Aug','Sep','Oct','Nov','Dec',"Jan","Feb",'Mar','Apr','May'))
for(i in 2:n){
lines(as.numeric(Xhat[i,-1]), col=grey(.6))
}
lines((B1 %*% mu)[-1], lwd=2)
pcarank = PcaRank(Xt, k=ncomp, proj=1e2)
mu = muhat + colMeans(pcarank@scores %*% t(pcarank@loadings))
# generate random observations
V = c(1e-1, 1e-1, 1e-1, 1e-1, 1e-1)
ndata = n
nbasis = ncol(B)
## add noise to loadings
B.mat = matrix(0, nrow=ndata, ncol=nbasis)
for(i in 1:ndata){
B.mat.j = matrix(0, nrow=nbasis, ncol=ncomp)
for(j in 1:ncomp){
B.mat.j[,j] = my.mvrnorm(n=1, mu=pcarank@loadings[,j], Sigma=diag(rep(V[j],nbasis)))
}
B.mat[i,] = muhat + colMeans(pcarank@scores %*% t(B.mat.j))
}
## add white noise to each element
B.mat = B.mat + matrix(rnorm(ndata*nbasis, 0, 1e-1), ndata, nbasis)
Xhat = B.mat %*% t(B1)
# Xhat[,1] = as.numeric(mydata[,1])
plot(as.numeric(Xhat[1,-1]), col=grey(.6), type='l',xaxt='n',
ylab="Sea surface temperature", xlab="Month",
ylim=(c(min(mydata), max(mydata+.1))))
axis(side=1, at=1:12, labels=c('Jun','Jul','Aug','Sep','Oct','Nov','Dec',"Jan","Feb",'Mar','Apr','May'))
for(i in 2:n){
lines(as.numeric(Xhat[i,-1]), col=grey(.6))
}
lines((B1 %*% mu)[-1], lwd=2)
pcarank = PcaRank(Xt, k=ncomp, proj=1e2)
mu = muhat + colMeans(pcarank@scores %*% t(pcarank@loadings))
# generate random observations
V = c(1,1,1,1,10)
ndata = n
nbasis = ncol(B)
## add noise to loadings
B.mat = matrix(0, nrow=ndata, ncol=nbasis)
for(i in 1:ndata){
B.mat.j = matrix(0, nrow=nbasis, ncol=ncomp)
for(j in 1:ncomp){
B.mat.j[,j] = my.mvrnorm(n=1, mu=pcarank@loadings[,j], Sigma=diag(rep(V[j],nbasis)))
}
B.mat[i,] = muhat + colMeans(pcarank@scores %*% t(B.mat.j))
}
## add white noise to each element
B.mat = B.mat + matrix(rnorm(ndata*nbasis, 0, 1e-1), ndata, nbasis)
Xhat = B.mat %*% t(B1)
# Xhat[,1] = as.numeric(mydata[,1])
plot(as.numeric(Xhat[1,-1]), col=grey(.6), type='l',xaxt='n',
ylab="Sea surface temperature", xlab="Month",
ylim=(c(min(mydata), max(mydata+.1))))
axis(side=1, at=1:12, labels=c('Jun','Jul','Aug','Sep','Oct','Nov','Dec',"Jan","Feb",'Mar','Apr','May'))
for(i in 2:n){
lines(as.numeric(Xhat[i,-1]), col=grey(.6))
}
lines((B1 %*% mu)[-1], lwd=2)
lines((B1 %*% spatial.median(B.mat, delta=1e-5)$mu)^2))[-1], lwd=2)
lines((B1 %*% spatial.median(B.mat, delta=1e-5)$mu)[-1], lwd=2)
lines((B1 %*% depth.median(B.mat, delta=1e-5)$mu)[-1], lwd=2, col=adjustcolor("blue", alpha.f=.5))
pcarank = PcaRank(Xt, k=ncomp, proj=1e2)
mu = muhat + colMeans(pcarank@scores %*% t(pcarank@loadings))
# generate random observations
V = c(1,1,1,1,10)
ndata = n
nbasis = ncol(B)
## add noise to loadings
B.mat = matrix(0, nrow=ndata, ncol=nbasis)
for(i in 1:ndata){
B.mat.j = matrix(0, nrow=nbasis, ncol=ncomp)
for(j in 1:ncomp){
B.mat.j[,j] = my.mvrnorm(n=1, mu=pcarank@loadings[,j], Sigma=diag(rep(V[j],nbasis)))
}
B.mat[i,] = muhat + colMeans(pcarank@scores %*% t(B.mat.j))
}
## add white noise to each element
B.mat = B.mat + matrix(rnorm(ndata*nbasis, 0, 1e-1), ndata, nbasis)
## add comtamination
B.mat[2:6,2:6] = B.mat[2:6,2:6] + 1e2
Xhat = B.mat %*% t(B1)
# Xhat[,1] = as.numeric(mydata[,1])
plot(as.numeric(Xhat[1,-1]), col=grey(.6), type='l',xaxt='n',
ylab="Sea surface temperature", xlab="Month",
ylim=(c(min(mydata), max(mydata+.1))))
axis(side=1, at=1:12, labels=c('Jun','Jul','Aug','Sep','Oct','Nov','Dec',"Jan","Feb",'Mar','Apr','May'))
for(i in 2:n){
lines(as.numeric(Xhat[i,-1]), col=grey(.6))
}
lines((B1 %*% mu)[-1], lwd=2)
lines((B1 %*% spatial.median(B.mat, delta=1e-5)$mu)[-1], lwd=2, col=adjustcolor("red", alpha.f=.5))
lines((B1 %*% depth.median(B.mat, delta=1e-5)$mu)[-1], lwd=2, col=adjustcolor("blue", alpha.f=.5))
lines((B1 %*% colMeans(B.mat))[-1], lwd=2, col=adjustcolor("green", alpha.f=.5))
Xhat = B.mat %*% t(B1)
# Xhat[,1] = as.numeric(mydata[,1])
plot(as.numeric(Xhat[1,-1]), col=grey(.6), type='l',xaxt='n',
ylab="Sea surface temperature", xlab="Month",
ylim=(c(min(Xhat), max(Xhat+.1))))
axis(side=1, at=1:12, labels=c('Jun','Jul','Aug','Sep','Oct','Nov','Dec',"Jan","Feb",'Mar','Apr','May'))
for(i in 2:n){
lines(as.numeric(Xhat[i,-1]), col=grey(.6))
}
lines((B1 %*% mu)[-1], lwd=2)
lines((B1 %*% spatial.median(B.mat, delta=1e-5)$mu)[-1], lwd=2, col=adjustcolor("red", alpha.f=.5))
lines((B1 %*% depth.median(B.mat, delta=1e-5)$mu)[-1], lwd=2, col=adjustcolor("blue", alpha.f=.5))
lines((B1 %*% colMeans(B.mat))[-1], lwd=2, col=adjustcolor("green", alpha.f=.5))
